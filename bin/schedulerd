#!/usr/bin/python
import datetime
import logging
import os

from warmpi import get_optparse,SubSystem
from warmpi.schedule.program import Programs, Period

def total_seconds(td):
    return (td.microseconds / 10.0**6) + (td.seconds + td.days * 24 * 3600)

class SchedulerSubSystem(SubSystem):
    def __init__(self, user, daemon):
        super(SchedulerSubSystem, self).__init__('scheduler', user, daemon)
        import warmpi.relayctrl.client as relay
        import warmpi.temperature.client as temperature
        self.relay = relay.LocalClient()
        self.temperature = temperature.LocalClient()
        self.current_periods = {}
        self.active_periods = {}
        self.timer = None
        self.programs = Programs(os.path.join(self.dir, 'programs.xml'), self.programs_updated)

        from warmpi.schedule.upnp import HeatingController
        self.device = HeatingController(self.programs)
        self.device.start()
        self.create_server({'get_active_program':lambda : self.programs.active_program,
                            'set_active_program':self.programs.set_active_program,
                            'get_programs':self.programs.programs.keys,
                            'get_program':lambda program_id: self.programs.programs[program_id],
                            'add_program':self.programs.add_program,
                            'remove_program':self.programs.remove_program,
                            'add_period':self.programs.add_period,
                            'remove_period':self.programs.remove_period})

    def after_stop(self):
        self.device.stop()

    def programs_updated(self, programs, reason, arg):
        self.programs = programs
        if self.programs.active_program is not None:
            self.load_periods()

    def load_periods(self):
        today = datetime.datetime.today().weekday()
        periods = self.programs.active_program.get_periods_for_day(today)
        self.current_periods = {}
        for period in periods:
            sys_periods = self.current_periods.get(period.system, None)
            if sys_periods is None:
                self.current_periods[period.system] = [period]
            else:
                sys_periods.append(period)

        for system, periods in self.current_periods.items():
            periods.sort(lambda x,y: cmp(x.start, y.start))

        self.evaluate_periods()

    def evaluate_periods(self):
        systems = {'HW': self.evaluate_hw, 'CH':self.evaluate_ch}
        new_periods = {}
        now = datetime.datetime.now()
        now_time = now.time()
        next_start_stop = datetime.time.max
        for periods in self.current_periods.values():
            for period in periods:
                if now_time >= period.start and now_time < period.end:
                    new_periods[period.system] = period
                    if period.end < next_start_stop:
                        next_start_stop = period.end
                else:
                    if now_time < period.start and period.start < next_start_stop:
                        next_start_stop = period.start

        for system,evaluate in systems.items():
            active = self.active_periods.get(system, None)
            next = new_periods.get(system, None)
            if active != next:
                try:
                    evaluate(active, next)
                except:
                    logging.error('Exception while evaluating system.', exc_info=True)
        self.active_periods = new_periods

        if next_start_stop == datetime.time.max:
            midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
            tomorrow =  midnight + datetime.timedelta(days=1)
            self.sleep_util(tomorrow, self.load_periods)
        else:
            next_dt = now.replace(hour=next_start_stop.hour, minute=next_start_stop.minute, second=0, microsecond=0)
            self.sleep_util(next_dt, self.evaluate_periods)

    def sleep_util(self, dt_util, cb):
        self.__sleep_info = (dt_util, cb)
        self.__sleep_again()

    def __sleep_again(self):
        if self.timer is not None:
            reactor.rem_timer(self.timer)

        dt_util, cb = self.__sleep_info
        diff = total_seconds(dt_util - datetime.datetime.now())
        if diff > 60.0:
            self.timer = reactor.add_timer(diff / 2.0, self.__sleep_again)
        else:
            self.timer = reactor.add_timer(diff, cb)
        
    def evaluate_hw(self, previous_period, next_period):
        if previous_period is None:
            msg = 'ON  +'
            self.relay.set_state('HW', True)
        else:
            msg = 'OFF -'
            self.relay.set_state('HW', False)
        logging.info('Turning Hot Water %s', msg)

    def evaluate_ch(self, previous_period, next_period):
        if previous_period is None:
            msg = 'ON  +'
            for zone, setpoint in next_period.temperatures:
                self.temperature.set_zone_setpoint(zone, setpoint)
            self.relay.set_state('CH', True)
        else:
            msg = 'OFF -'
            self.relay.set_state('CH', False)
        logging.info('Turning Central Heating %s', msg)


if __name__ == '__main__':
    parser = get_optparse()
    options,args = parser.parse_args()
    scheduler = SchedulerSubSystem(options.user, options.daemon)
    scheduler.run()

