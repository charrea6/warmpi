#!/usr/bin/python
import sys

from warmpi.temperature.client import LocalClient
from warmpi.command import dispatch, define_command, UsageError

commands = []

@define_command(commands, 'ls', 'ls\nLists the currently detected thermostat names.')
def ls(options,args):
    thermostats = LocalClient().get_thermostats().keys()
    thermostats.sort()
    for thermostat in thermostats:
        print '%s' % thermostat

@define_command(commands, 'temps','temps\nLists the currently detected thermostats, their zone and current temperature.')
def temps(options, args):
    temps = LocalClient().get_thermostats().items()
    temps.sort(lambda x,y: cmp(x[0], y[0]))
    for thermostat,(zone, temp, setpoint) in temps:
        print '%s(%s) : %.2f' % (thermostat, zone, temp)

@define_command(commands, 'temp', 'temp <thermostat>\nDisplays the temperature of the thermostat specified by <thermostat>.')
def temp(options,args):
    if len(args) != 1:
        raise UsageError()
    print '%.2f' % LocalClient().get_thermostat_temperature(args[0])

@define_command(commands, 'zone', '''zone <thermostat> [<zone>]
If <zone> is supplied sets the zone of the specified thermostat.
Otherwise displays the current zone of the specified thermostat.
''')
def zone(options, args):
    if len(args) == 1:
        print LocalClient().get_thermostat_zone(args[0])
    elif len(args) == 2:
        LocalClient().set_thermostat_zone(args[0], args[1])
    else:
        raise UsageError()

@define_command(commands, 'setpoint', '''setpoint <thermostat> [<setpoint>]
If <setpoint> is supplied sets the setpoint (in degrees C) of the specified thermostat.
Otherwise displays the current setpoint of the specified thermostat.
''')
def setpoint(options, args):
    if len(args) == 1:
        print '%.2f' % LocalClient().get_thermostat_setpoint(args[0])
    elif len(args) == 2:
        LocalClient().set_thermostat_setpoint(args[0], float(args[1]))
    else:
        raise UsageError()

@define_command(commands, 'zonesp','''zonesp <zone> <setpoint>
Sets the setpoint of all thermostats matching the specified zone.
''')
def zonesp(options, args):
    if len(args) == 2:
        LocalClient().set_zone_setpoint(args[0], float(args[1]))
    else:
        raise UsageError()

if __name__ == '__main__':
    dispatch(commands, sys.argv[1:])